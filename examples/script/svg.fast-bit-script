/* fast-bit image processing tool
 * Copyright (C) 2010 - 2011 Jacob Dawid
 * jacob.dawid@googlemail.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This examples demonstrates how to generate vector images and save
 * them as a scalable vector graphics file.
 */

// Create a VectorImage.
vectorImage = new VectorImage();

// Resize it to 600x600.
vectorImage.resize(600, 600);

// Set a background color.
vectorImage.setBackgroundColor(rgb(0, 0, 0));

angle1 = 0;
angle2 = 3.141 / 2;
color = 0;
colorstep = 8;

// Add a rectangle to the top-left corner.
vectorImage.addRectangle(50, 50, 50, 50, rgb(100, 100, 100));

// Draw some fancy lines.
for(step = 0; step < 3.141; step += 0.1)
{
	sin1 = sin(angle1 + step);
	cos1 = cos(angle1 + step);
	sin2 = sin(angle2 + step);
	cos2 = cos(angle2 + step);
	x1 = cos1 * 300 + 300;
	y1 = sin1 * 300 + 300;
	x2 = cos2 * 300 + 300;
	y2 = sin2 * 300 + 300;
 
	color += colorstep;
	if(color > 255)
	{
		color = 255;
		colorstep *= -1;
	}

	if(color < 0)
	{
		color = 0;
		colorstep *= -1;
	}
	vectorImage.addLine(x1, y1, x2, y2, 0.75, rgba(color, 255 - color, 100, color));	
}

radius = 100;
edges = 9;

// Draw a polygon.
vectorImage.polygonBegin(rgb(123, 123, 123));
for(step = 0; step < 3.141 * 2; step += 3.141 * 2 / edges)
{
	vectorImage.polygon(radius * cos(step) + 300, radius * sin(step) + 300);
}
vectorImage.polygonEnd();

// Add another rectangle.
vectorImage.addRectangle(500, 500, 50, 50, rgb(180, 180, 180));

// Dump vector image as svg file.
vectorImage.saveAsSvg("example.svg");
writeln("Wrote result to file example.svg in the applications directory.");