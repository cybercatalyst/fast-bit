/* fast-bit image processing tool
 * Copyright (C) 2010 - 2011 Jacob Dawid
 * jacob.dawid@googlemail.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Datei, die konvertiert werden soll.
file = "examples/polygon.png"

// Sonstige Parameter.
safeScale = 4;
white = rgb(255, 255, 255);
black = rgb(0, 0, 0);
ringIndex = 2;
ringx = [1, 1, 1, 0, -1, -1, -1, 0];
ringy = [-1, 0, 1, 1, 1, 0, -1, -1];
mod = [1, -2, 3, -4, 5, -6, 7, -8, 9];
trackingPolygon = false;

writeln("Lade Bilder und fuehre Vorverarbeitung durch..");

// Das Quellbild laden und binarisieren.
baseImage = new Image();
baseImage.load(file);
baseImage.scale(safeScale);
baseImage.convertToGray();
baseImage.grayValueSplay();
baseImage.threshold(128);

// Dasselbe wiederholen.
backupImage = new Image();
backupImage.load(file);
backupImage.scale(safeScale);
backupImage.convertToGray();
backupImage.grayValueSplay();
backupImage.threshold(128);

// Eines der Bilder zu einem Kantenbild
// wandeln.
writeln("Fuehre Dilatation durch..");
baseImage.dilatation();

writeln("Wende LaPlace-Filter an..");
baseImage.laPlace();

writeln("Finde Nulldurchgaenge..");
baseImage.detectZeroCrossings();

// Neue Vektorgrafik anlegen.
vectorImage = new VectorImage();
vectorImage.resize(baseImage.width() / safeScale, baseImage.height() / safeScale);
vectorImage.setBackgroundColor(rgb(255, 255, 255));

width = baseImage.width();
height = baseImage.height();
totalPixels = width * height;
percent = 0.0;

// Kantendetektion und Wandlung.
for(y = safeScale; y < height - safeScale; y++)
	for(x = safeScale; x < width - safeScale; x++)
	{
		// Durchlaufe das Kantenbild, bis ein weisses Pixel auftaucht.
		if(baseImage.pixel(x, y) == white)
		{
			writeln("Polygon gefunden, starte Verfolgung..");
			// Setze die Verfolgungskoordinaten auf die aktuelle Position.
			trackx = x;
			tracky = y;

			// Marker zum Abbrechen der Schleife setzen.
			trackingPolygon = true;

			// Farbe bestimmen. Wie aus der Ausarbeitung ersichtlich,
			// befindet sich die linke, obere Ecke des Blobs um eine
			// Position weiter rechts und zwei weiter unten als die
			// Ecke im Kantenbild.
			vectorImage.addPolygon(backupImage.pixel(x + 1, y + 2));
			
			// Solange weiter verfolgt werden kann:
			while(trackingPolygon)
			{
				// Fuege weiteren Eckpunkt hinzu.
				vectorImage.polygon(trackx / safeScale, tracky / safeScale);
				
				// Loesche diesen Kantenpunkt im Kantenbild.
				baseImage.setPixel(trackx, tracky, black);

				// Abbruchbedingung setzen.
				trackingPolygon = false;

				// Maximal acht Versuche duerfen es sein, dann wurden alle
				// Punkte der Umgebung abgetastet.
				for(tries = 0; tries < 8; tries++)
				{
					// Hole die aktuelle Verschiebung aus dem Ringindex.
					stepx = ringx[ringIndex];
					stepy = ringy[ringIndex];
					
					// Pruefe, ob dort eine weitere Kante zu finden ist.
					if(baseImage.pixel(trackx + stepx, tracky + stepy) == white)
					{
						// Ein weiterer Punkt der Kante wurde gefunden.
						// Bewege den Verfolgungsmarker an die neue Position.
						trackx += stepx;
						tracky += stepy;

						// Weitere Verfolgung der Kante aufnehmen.
						trackingPolygon = true;
						
						// Suche nach weiteren Pixeln hier abbrechen.
						break;
					}
					else
					{
						// Es wurde an der betreffenden Stelle keine weiterer
						// Punkt der Kante gefunden. Springe zur naechsten
						// Stelle.
						ringIndex += mod[tries];	
						
						// Sorge dafuer, dass der Index immer im gueltigen
						// Bereich liegt.
						while(ringIndex < 0)
							ringIndex += 8;	
						ringIndex = ringIndex % 8;
					}
				}
			}
			// Schliesse das aktuelle Polygon ab.
			vectorImage.finishPolygon();
			writeln("Suche naechstes Polygon..");
		}

		// Zeige aktuellen Status an, sobald die naechste Huerde ueberschritten ist.	
		if(x * y / totalPixels > percent)
		{
			percent = percent + 0.01;
			percentTimes100 = percent * 100.0;
			writeln("Bearbeitung zu " + percentTimes100.toPrecision(3) + "% abgeschlossen.");
		}	
	}

// Optimierung der Vektorgrafik.
writeln("Optimiere Vektorgrafik..");
vectorImage.optimize();

// Speichern der Vektorgrafik.
writeln("Speichern..");
vectorImage.saveAsSvg(file + ".svg");